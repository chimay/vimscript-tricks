*vimscript-tricks.txt*		advanced and helpful vimscript tricks

==============================================================================
CONTENTS			*vimscript-tricks*

Introduction			|vimscript-tricks-introduction|
Help				|vimscript-tricks-help|
Expressions			|vimscript-tricks-expressions|
Strings				|vimscript-tricks-strings|
Numbers				|vimscript-tricks-numbers|
Variables			|vimscript-tricks-variables|
Lists & Dictionaries		|vimscript-tricks-lists-and-dicts|
Constants			|vimscript-tricks-constants|
Options				|vimscript-tricks-options|
File system			|vimscript-tricks-filesystem|
Buffers				|vimscript-tricks-buffers|
Stream				|vimscript-tricks-stream|
Functions			|vimscript-tricks-functions|
Tabs & windows			|vimscript-tricks-tabs-and-windows|
Mappings			|vimscript-tricks-mappings|
Autocommands			|vimscript-tricks-autocommands|
Common typos			|vimscript-tricks-common-typos|
Errors				|vimscript-tricks-errors|
Profile				|vimscript-tricks-profile|

==============================================================================
INTRODUCTION				*vimscript-tricks-introduction*

VimL is full of features, but sometimes it is hard to find which function
or command will do the job you want.

If you ever searched the web for `vim script ex command output in a var`,
you surely have had results talking about |:redir|. This is ok, but
there is a more elegant solution for this particular problem.

This wiki collects vim script snippets, whose some were hard to find. You
may already know some of them, and I hope you will gladly discover
the others.

==============================================================================
HELP						*vimscript-tricks-help*

As a VimL programmer, the most used help file is : >

 :help eval.txt
<

Once there, you can use a plain search.

E.g., searching for `buf.*()` will give you buffer related functions.

You can also use the completion in command mode : >

 :help buf*(<tab>
<

will give you a list of candidates, like |bufnr()| or |bufadd()|.

The |:helpgrep| command search in all help files and fill the quickfix
list.

Each kind of VimL object has its own syntax :

- normal mode key : |ctrl-a|
- insert mode key : |i_ctrl-a|
- visual mode key : |v_o|
- command mode key : |c_ctrl-d|, |c_<tab>|
- command : |:buffers|
- function : |getbufinfo()|
- option : |'option'|
- expression : |expr-&&|
- regex pattern : |/*|
- vim flag : |-p|

Finally, the reference : >

 :help help
 :help help-context
<

==============================================================================
EXPRESSIONS					*vimscript-tricks-expressions*

The command |:let| evaluate an expression and assign the result : >

 let list = range(5)
 echo list
<

The command |:eval| evaluate an expression without assigning the result : >

 let list = range(5)
 eval list->add(10)
 echo list
<

The command |:call| calls a function, without assigning the result : >

 let list = range(5)
 call add(list, 10)
 echo list
<

==============================================================================
STRINGs						*vimscript-tricks-strings*

Generic				|vimscript-tricks-strings-generic|
Match				|vimscript-tricks-strings-match|
Multibyte characters		|vimscript-tricks-strings-multibyte|

------------------------------------------------------------------------------
GENERIC					*vimscript-tricks-strings-generic*

You can use |string()| to convert almost anything to a string : >

 let str = string(range(10))
 echo str[1:7]
 let str = string(#{ abc : 'def', ghi : 'jkl' })
 echo str[1:12]
<

------------------------------------------------------------------------------
MATCH					*vimscript-tricks-strings-match*

There are a lot of match functions : >

 let string = 'find a match in the shelve'
 " match start index
 let index = string->match('shelve')
 echo index
 " match string
 let matchstring = string->matchstr(' a \w\+')
 echo matchstring
 " match string, begin & end index
 let match_beg_end = string->matchstrpos('\<a \w\+')
 echo match_beg_end
 " full match & submatches from \(...\)
 let matchlist = string->matchlist('\(\w\+\) \(\w\+\) \(\w\+\)')
 echo matchlist
<

It's more complicated to get a string gathering all full matches
occurences. There is a workaround using |substitute()| : >

 let string = 'in that room, you can find a table, a chair and a window.'
 function! Allmatches (string)
    let matches = []
    let Lambda = { match -> string(matches->add(match[0])[-1]) }
    call substitute(a:string, '\<a \w\+', Lambda, 'g')
    return matches
 endfunction
 echo Allmatches(string)
<

You can also uses the |sub-replace-\=| syntax :

 let string = 'in that room, you can find a table, a chair and a window.'
 function! Allmatches (string)
    let matches = []
    call substitute(a:string, '\<a \w\+', '\=matches->add(submatch(0))', 'g')
    return matches
 endfunction
 echo Allmatches(string)
<

Finally, you have the straightforward (and verbose) solution that uses a
`while match found` loop.

------------------------------------------------------------------------------
MULTIBYTE CHARACTERS			*vimscript-tricks-strings-multibyte*

While |len()| or |strlen()| give you a string length in bytes, |strcharlen()|
gives you the length in characters : >


 let str = 'aà eéè iï oô uù'
 " 21
 echo len(str) strlen(str)
 " 15
 echo strcharlen(str)
<

You can convert byte and character index : >

 let str = 'aà eéè iï oô uù'
 " byte index of the 4th char = 5
 echo str->byteidx(4)
 " char index of the 9th byte = 6
 echo str->charidx(9)
<

==============================================================================
NUMBERS						*vimscript-tricks-numbers*


Float to integer with `float2nr()` : >

 let float = 2.01
 echo float2nr(float)
<

Integer to float with |round()| : >

 let int = 2
 echo round(int)
<

String to integer with `str2nr()` : >

 let string = '   0002  '
 echo str2nr(string)
<

==============================================================================
VARIABLES					*vimscript-tricks-variables*

Global variables			|vimscript-tricks-variables-global|
Function local variables		|vimscript-tricks-variables-function-local|
Other variables scopes			|vimscript-tricks-variables-other-scopes|

------------------------------------------------------------------------------
GLOBAL VARIABLES			*vimscript-tricks-variables-global*

You can define and access global vars with the `g:` prefix : >

 let g:var = 'global var content'
 echo g:var
<

------------------------------------------------------------------------------
FUNCTION LOCAL VARIABLES	*vimscript-tricks-variables-function-local*

Most of the time, variables used inside a function are local, even
without the `l:` prefix : >

 let var = 1
 let box = 2
 echo 'var from outide : ' var
 echo 'box from outside : ' box
 fun! Locals ()
 	let var = 3
 	let l:box = 4
 	echo 'var from inside : ' var
 	echo 'l:box from inside : ' l:box
 	echo 'box from inside : ' box
 endfun
 call Locals ()
 echo 'var from outide : ' var
 echo 'box from outside : ' box
<

The `l:` can sometimes be useful however, for instance to avoid
confusion with a (neo)vim `v:` variable, like `v:count`.

Its almost for readability, for the editor seem to see the difference : >

 fun! VimVars ()
 	let l:count = 3
 	echo 'l:count : ' l:count
 	echo 'count : ' count
 	echo 'v:count : ' v:count
 endfun
<

------------------------------------------------------------------------------
OTHER VARIABLES SCOPES		*vimscript-tricks-variables-other-scopes*

You can define and access buffer local vars with the `b:` prefix : >

 let b:var = 'buffer local var content'
 echo b:var
 buffer #
 " throws an error
 echo b:var
<

Here are the other types of local variables and their prefixes :

- window local : `w:`
- tab local    : `t:`
- script local : `s:`
- vim variable : `v:`

==============================================================================
LIST AND DICTIONARIES			*vimscript-tricks-lists-and-dicts*

Lists			|vimscript-tricks-lists-and-dicts-lists|
Dictionaries		|vimscript-tricks-lists-and-dicts-dicts|
Copy			|vimscript-tricks-lists-and-dicts-copy|
Nested			|vimscript-tricks-lists-and-dicts-nested|
Search			|vimscript-tricks-lists-and-dicts-search|
Add			|vimscript-tricks-lists-and-dicts-add|
Remove			|vimscript-tricks-lists-and-dicts-remove|
Map			|vimscript-tricks-lists-and-dicts-map|
Filter			|vimscript-tricks-lists-and-dicts-filter|
Repeat			|vimscript-tricks-lists-and-dicts-repeat|
Join			|vimscript-tricks-lists-and-dicts-join|
Split			|vimscript-tricks-lists-and-dicts-split|

------------------------------------------------------------------------------
LISTS			*vimscript-tricks-lists-and-dicts-lists*

Examples : >

 let list = [3, 4, 5, 6, 7]
 echo list[0]
 echo list[2]
 echo list[-1]
 echo list[-2]
 echo list[1:]
 echo list[:-2]
 echo list[1:3]
<

------------------------------------------------------------------------------
DICTIONARIES			*vimscript-tricks-lists-and-dicts-dicts*

Examples : >

 " empty
 let dict = {}
 echo dict
 " with some keys & values
 let dict = { 'one' : 'value one', 'two' : 'value 2'}
 echo dict
 " add keys & valuse
 let dict.name = 'john'
 let dict.hobbies = ['tennis', 'music']
 " access values using keys
 echo dict.name
 echo dict['hobbies']
 " using key variable
 let key = 'name'
 echo dict[key]
 let key = 'hobbies'
 echo dict[key]
 " list of keys
 echo keys(dict)
 " list of values
 echo values(dict)
<

------------------------------------------------------------------------------
COPY				*vimscript-tricks-lists-and-dicts-copy*

By default, list & dictionaries are accessed by reference : >

 " list
 let list = [3, 4, 5, 6, 7]
 let ref = list
 let ref[2] = 100
 " original is modified
 echo list
 echo ref
 " dict
 let dict = { 'one' : 'value one', 'two' : 'value 2'}
 let shadow = dict
 let shadow.one = 'changed'
 let shadow['two'] = 'again'
 " original is modified
 echo dict
 echo shadow
<

You can explicitly make a copy : >

 let list = [3, 4, 5, 6, 7]
 let snapshot = copy(list)
 let snapshot[2] = 100
 " no change in original
 echo list
 echo snapshot
 " dict
 let dict = { 'one' : 'value one', 'two' : 'value 2'}
 let snapshot = copy(dict)
 let snapshot.one = 'changed'
 let snapshot['two'] = 'again'
 " no change in original
 echo dict
 echo snapshot
<

------------------------------------------------------------------------------
NESTED				*vimscript-tricks-lists-and-dicts-nested*

In case of a nested list or dict, |copy()| only copy the first level : >

 let nested_list = [range(1,3), range(2, 10)]
 let shallow = copy(nested_list)
 echo nested_list
 echo shallow
 " modifying first level
 let shallow[0] = ['new', 'list']
 " no change in original
 echo nested_list
 echo shallow
<

The objects inside it are passed by reference : >

 let nested_list = [range(1,3), range(2, 10)]
 let shallow = copy(nested_list)
 echo nested_list
 echo shallow
 " modifying second level
 let shallow[0][1] = 100
 " the original is modified
 echo nested_list
 echo shallow
<

To avoid changing the original by mistake, use |deepcopy()| : >

 let nested_list = [range(1,3), range(2, 10)]
 let deep = deepcopy(nested_list)
 echo nested_list
 echo deep
 " modifying second level
 let deep[0][1] = 100
 " no change in original
 echo nested_list
 echo deep
<

------------------------------------------------------------------------------
SEARCH				*vimscript-tricks-lists-and-dicts-search*

First index where element is found : >

 let list = [2, 3, 4, 1]
 echo list->index(3)
<

You can specify the starting index : >

let list = [2, 3, 4, 1, 3, 2]
echo list->index(3)
echo list->index(3, 2)
<

------------------------------------------------------------------------------
ADD				*vimscript-tricks-lists-and-dicts-add*

Concat : >

 let first = [0, 1, 2]
 let second = [3, 4, 5]
 let list = first + second
 echo list
 " extend
 let list = first
 echo list
 eval list->extend(second)
 echo list
<

Add : >

 let list = range(3)
 echo list
 eval list->add(10)
 echo list
<

Insert : >

 " first
 let list = range(3)
 echo list
 eval list->insert(-1)
 echo list
 " before index
 let index = 2
 eval list->insert(-5, index)
 echo list
 " before last
 eval list->insert(-10, -1)
 echo list
 " last (easier with add())
 let length = len(list)
 eval list->insert(-20, length)
 echo list
<

------------------------------------------------------------------------------
REMOVE				*vimscript-tricks-lists-and-dicts-remove*

Remove element(s) : >

 let list = range(10)
 eval list->remove(5)
 echo list
 let list = range(10)
 eval list->remove(3, 5)
 echo list
<

------------------------------------------------------------------------------
MAP				*vimscript-tricks-lists-and-dicts-map*

You can apply the same function on all list element with |map()| : >

 let list = range(1, 10)
 eval list->map({ _, val -> 2 * val })
 " or
 call map(list, { _, val -> 2 * val })
 " table of 2
 echo list
<

------------------------------------------------------------------------------
FILTER				*vimscript-tricks-lists-and-dicts-filter*

You can filter list elements with |filter()| : >

 let list = range(1, 10)
 echo list->filter({ _, val -> val % 3 == 0 })
<

------------------------------------------------------------------------------
REPEAT				*vimscript-tricks-lists-and-dicts-repeat*

Repeat the same sequence in a list with |repeat()| : >

 echo [0]->repeat(4)
 echo [0, 1, 2, 3]->repeat(2)
<

Also works to build strings : >

 echo 0->repeat(4)
 echo 'a'->repeat(4)
<

Avoid it for nested list however, references are used internally : >

 let nested = [ [1, 2] ]->repeat(4)
 echo nested
 eval nested[0]->add(3)
 echo nested
<

Instead, use a combi of range & map : >

 let nested = range(4)->map('[1, 2]')
 echo nested
 eval nested[0]->add(3)
 echo nested
<

Nested list of empty lists, useful for initialization : >

 " init
 let nested = range(4)->map('[]')
 echo nested
 eval nested[0]->add(2)
 eval nested[1]->add(3)
 eval nested[2]->add(4)
 eval nested[3]->add(5)
 echo nested

------------------------------------------------------------------------------
JOIN				*vimscript-tricks-lists-and-dicts-join*

Concatenate list element in a string with |join()|.

Default separator is space : >

 let list = range(10)
 echo join(list)
 echo join(list, ' ')
<

Alternative separator : >

 let list = range(10)
 echo join(list, ' - ')
<

------------------------------------------------------------------------------
SPLIT				*vimscript-tricks-lists-and-dicts-split*

Split string in list elements with |split()|.

Default separator is space : >

 let string = 'one two three'
 echo split(string)
 echo split(string, ' ')
<

Alternative separator : >

 let string = 'one - two - three'
 echo split(string, ' - ')
<

Inner empty elements are kept : >

 let string = 'one -  - two - three'
 echo split(string, ' - ')
<

Empty element at begin or end are kept only if asked : >

 let string = ' - one - two - three - '
 echo split(string, ' - ')
 let keepempty = v:true
 echo split(string, ' - ', keepempty)
<

==============================================================================
CONSTANTS					*vimscript-tricks-constants*

Examples : >

 let box = 3
 echo box
 " box -> constant
 lockvar box
 " throws error E741
 let box = 4
 echo box
 " box -> variable
 unlockvar box
 " ok
 let box = 5
 echo box
 " set box as constant from the start
 const box = 3
 " throws error E741
 let box = 4
<

==============================================================================
VARIABLE CONTAINING CODE		*vimscript-tricks-variable-code*

Ex command			|vimscript-tricks-variable-code-ex-command|
Expression			|vimscript-tricks-variable-code-expression|
Normal mode			|vimscript-tricks-variable-code-normal-mode|
Pointer				|vimscript-tricks-variable-code-pointer|

------------------------------------------------------------------------------
EX COMMAND			*vimscript-tricks-variable-code-ex-command*

With |:execute| : >

 let code = 'let var = range(5)'
 execute code
 echo var
<

------------------------------------------------------------------------------
EXPRESSION			*vimscript-tricks-variable-code-expression*

With |eval()| : >

 let expression = "strftime('%H:%M')"
 echo eval(expression)
<

Can be used to revert |string()| : >

 let list = range(10)
 let str = string(list)
 " returns 1 = string
 echo type(str)
 let new_list = eval(str)
 echo new_list
 " returns 3 = list
 echo type(new_list)
<

------------------------------------------------------------------------------
NORMAL MODE			*vimscript-tricks-variable-code-normal-mode*

With |:normal| : >

 let delta = 2
 execute 'normal! ' . delta . "\<c-o>"
<

------------------------------------------------------------------------------
POINTER				*vimscript-tricks-variable-code-pointer*

Variable containing the name of another variable : >

 let var = 'hello'
 let ptr = 'var'
 echo {ptr}
<

==============================================================================
OPTIONS						*vimscript-tricks-options*

Access global option value with ampersand and `g:` prefix : >

 let &g:modifiable = 1
 echo &g:modifiable
<

Access local option value with ampersand and `l:` prefix : >

 let &l:modifiable = 1
 echo &l:modifiable
<

See also |setglobal|, |setlocal| and `let-&`.

Don't confound :

- the buffer local `l:` prefix in options
- the function local `l:` prefix in variables
- the buffer local `b:` prefix in variables

==============================================================================
FILE SYSTEM					*vimscript-tricks-filesystem*

Introduction			|vimscript-tricks-filesystem-test|
File name			|vimscript-tricks-filesystem-filename|
Globbing			|vimscript-tricks-filesystem-globbing|

------------------------------------------------------------------------------
TEST					*vimscript-tricks-filesystem-test*

Test for a regular file : >

 if filereadable(my_file)
 	call do_something (my_file)
 endif
<

Test for a directory : >

 if isdirectory(my_dir)
 	call do_something (my_dir)
 endif
<

------------------------------------------------------------------------------
FILE NAME				*vimscript-tricks-filesystem-filename*

Expand the tilde with |expand()| : >

 echo expand('~/Documents')
<

Modify the name with |fnamemodify()| : >

 " full path
 echo fnamemodify('~/Documents/file', ':p')
 echo fnamemodify('Documents/folder/file', ':p')
 " directory part (head)
 echo fnamemodify('~/Documents/file', ':h')
 echo fnamemodify('Documents/folder/file', ':h')
 " file part (tail)
 echo fnamemodify('~/Documents/file', ':t')
 echo fnamemodify('Documents/folder/file', ':t')
 " without extension
 echo fnamemodify('~/Documents/file.ext', ':r')
 echo fnamemodify('Documents/folder/file.ext', ':r')
 echo fnamemodify('~/Documents/file.tar.gz', ':r')
 echo fnamemodify('~/Documents/file.tar.gz', ':r:r')
 " extension
 echo fnamemodify('~/Documents/file.ext', ':e')
 echo fnamemodify('~/Documents/file.tar.gz', ':e')
 echo fnamemodify('~/Documents/file.tar.gz', ':e:e')
<

------------------------------------------------------------------------------
GLOBBING				*vimscript-tricks-filesystem-globbing*

List of files & dirs in current folder : >

 echo glob('*', v:false, v:true)
<

Recursive, all tree of files & dirs in current folder : >

 echo glob('**', v:false, v:true)
<

Note the double asterisk.

Tree of vim files : >

 echo glob('**/*.vim', v:false, v:true)
<

==============================================================================
BUFFERS						*vimscript-tricks-buffers*

Cursor				|vimscript-tricks-buffers-cursor|
Number and name			|vimscript-tricks-buffers-number-and-name|
List				|vimscript-tricks-buffers-list|
Lines				|vimscript-tricks-buffers-lines|

------------------------------------------------------------------------------
CURSOR				*vimscript-tricks-buffers-cursor*

Move the cursor : >

 " move cursor to last char of current line
 call cursor('.', col('$'))
 " move cursor to last buffer line
 call cursor('$', 1)
<

Save and restore the cursor position : >

 " save cursor position
 let position = getcurpos ()
 " ... travel, search ...
 " restore cursor position
 call setpos('.', position)
<

------------------------------------------------------------------------------
NUMBER AND NAME			*vimscript-tricks-buffers-number-and-name*

Name from number : >

 echo bufname(1)
<

Number from name : >

 let name = bufname(1)
 echo bufnr(name)
<

------------------------------------------------------------------------------
LIST					*vimscript-tricks-buffers-list*

All buffers : >

 let buffers = getbufinfo()
 for buf in buffers
 	echo buf.number ':' buf.name
 endfor
<

Listed buffers : >

 let buffers = getbufinfo({'buflisted' : 1})
 for buf in buffers
 	echo buf.number ':' buf.name
 endfor
<

------------------------------------------------------------------------------
LINES					*vimscript-tricks-buffers-lines*

Current buffer~

List of lines in current buffer : >

 " -- line number, output is a string
 " current line
 echo getline('.')
 " last line
 echo getline('$')
 " -- range of line, output is a list
 echo getline(1, 10)
 echo getline('.', '$')
<

With `setline(line, text)`, you can change a line.

With `append(line, text)`, you can append content below a line.

With `:put =var`, you can add |var| content below the cursor.

With `:put =list`, you add an element of |list| per line.

Any buffer~

Example : >

 " alternate buffer
 let bufnum = '#'
 " -- line number, output is a string
 echo getbufline(bufnum, 5)
 echo getbufline(bufnum, '$')
 " -- range of line, output is a list
 echo getbufline(bufnum, 1, 10)
 echo getbufline(bufnum, 1, '$')
 echo getbufline(bufnum, 1, '$')[4]
<

See also |setbufline()|, |appendbufline()|.

==============================================================================
STREAM						*vimscript-tricks-stream*

Input / Output

Ex command				|vimscript-tricks-stream-ex-command|
Shell command				|vimscript-tricks-stream-shell-command|
File content into a list		|vimscript-tricks-stream-file-to-list|
List content into a file		|vimscript-tricks-stream-list-to-file|

------------------------------------------------------------------------------
EX COMMAND 				*vimscript-tricks-stream-ex-command*

Ex command output into a variable with |execute()| :

 let var = execute('tabs')
 echo var
 let list = split(var, "\n")
 echo list
<

With |:redir| : >

 redir => var
 tabs
 redir END
 let list = split(var, "\n")
 echo list
<

------------------------------------------------------------------------------
SHELL COMMAND 			*vimscript-tricks-stream-shell-command*

Shell command output into a variable with |system()| or |systemlist()| : >

 let var = system('ls -l')
 echo var
 let list = systemlist('ls -l')
 echo list
<

------------------------------------------------------------------------------
FILE CONTENT INTO A LIST 		*vimscript-tricks-stream-file-to-list*

With |readfile()| : >

 let file = expand('~/Documents/file')
 let list = readfile(file)
 echo list
 let head = readfile(file, '', 10)
 echo head
 let tail = readfile(file, '', -10)
 echo tail
<

------------------------------------------------------------------------------
LIST CONTENT INTO A FILE 		*vimscript-tricks-stream-list-to-file*

With |writefile()| : >

 let list = ['first line', 'second line', 'third line']
 let file = expand('~/Documents/list-file')
 " replace content
 call writefile(list, file)
 " add content
 call writefile(list, file, 'a')
<

With |:redir| : >

 let list = ['first line', 'second line', 'third line']
 let content = join(list, "\n")
 let file = expand('~/Documents/content-file')
 execute 'redir! >' file
 silent! echo content
 redir END
 execute 'redir! >>' file
 silent! echo content
 redir END
<

Note the distinction between the function |execute()|
and the command |:execute|

==============================================================================
FUNCTIONS					*vimscript-tricks-functions*

Name				|vimscript-tricks-functions-name|
References			|vimscript-tricks-functions-references|
Arguments			|vimscript-tricks-functions-arguments|
optional arguments		|vimscript-tricks-functions-optional-arguments|
Autoload			|vimscript-tricks-functions-autoload|
Lambda				|vimscript-tricks-functions-lambda|
Method				|vimscript-tricks-functions-method|
Closure				|vimscript-tricks-functions-closure|
Dict functions			|vimscript-tricks-functions-dict-funs|

------------------------------------------------------------------------------
NAME 					*vimscript-tricks-functions-name*

Variable containing a function name : >

 let fun = 'strftime'
 echo {fun}('%H:%M')
<

------------------------------------------------------------------------------
REFERENCES			*vimscript-tricks-functions-references*

Function reference by name or reference : >

 let Funcname = function('Fun')
 let Funcref = funcref('Fun')
<

If the custom function `Fun` is redefined after that : >

- function() will refer to the new function having the same name
- funcref() will refer to the old function

|Fun| can also be defined after the call to |function()|.

Function reference by name : >

 let list = range(3)
 let Fun = function('add')
 echo Fun(list, 4)
 echo list
<

With predefined argument(s) : >

 let list = range(3)
 " add(list, element)
 let Fun = function('add', [list])
 echo Fun(4)
 echo Fun(5)
 echo list
<

------------------------------------------------------------------------------
ARGUMENTS				*vimscript-tricks-functions-arguments*

Inside a function definition, arguments are accessed with a `a:` prefix : >

 fun! Fun (argument)
 	return a:argument
 endfun
 echo Fun('hello')
<

You can call a function with a given argument list : >

 call(function, argument-list)
<

Example : >

 let list = range(5)
 let element = 'new'
 " synonym of add(list, element)
 echo call('add', [list, element])
 echo list
<

Also works with a function reference : >

 let list = range(5)
 let Fun = function('add')
 let element = 'new'
 " synonym of add(list, element)
 echo call(Fun, [list, element])
 echo list
<

------------------------------------------------------------------------------
OPTIONAL ARGUMENTS	*vimscript-tricks-functions-optional-arguments*

Named optional argument~

YOu can give a name to an optional argument : >

 fun! Fun (optional = 'default value')
 	return a:optional
 endfun
 echo Fun ()
 echo Fun ('another value')
<

Anonymous optional arguments~

Optional arguments can be defined with the three dots syntax `Fun(...)`.
You can access them with these special variables :

- a:0 : number of optional args
- a:1 : first optional arg
- a:2 : second optional arg
- ...
- a:000 : list of optional args

Application : pass the optional arguments of a function to another one : >

 fun! Fun (...)
 	let var = call('add', a:000)
 	return var
 endfun
 let list = range(5)
 echo Fun (list, 7)
 <

Mixed~

Example : >

 fun! Fun (named = 'default', ...)
 	return #{named: a:named, anonymous: a:000}
 endfun
 echo Fun ()
 echo Fun ('value')
 echo Fun ('value', 'one', 'two')
<

------------------------------------------------------------------------------
AUTOLOAD				*vimscript-tricks-functions-autoload*

It is a good idea to use the autoload feature as much as possible. The
definition of a function |myfunction| in a file |myfile| located in
`autoload/myfolder/` looks like : >

 fun! myfolder#myfile#myfunction ()
 	...
 endfun
<

The `autoload/myfolder` has to be somewhere in your |runtimepath|.

------------------------------------------------------------------------------
LAMBDA 					*vimscript-tricks-functions-lambda*

Example : >

 let list = [2, 3, 5, 4, 1]
 echo filter(list, {index, value -> value >= 4})
 let list = [2, 3, 5, 1, -1]
 echo map(list, {index, value -> index + value})
<

------------------------------------------------------------------------------
METHOD 					*vimscript-tricks-functions-method*

Example : >

 let number = -3.14
 echo number->abs()
 echo number->abs()->cos()
 echo number->abs()->cos()->acos()
<

Lambda method : >

 let number = 3
 echo number->{ x -> 2 * x }()
 echo number->{ x, y -> x + y }(4)
<

------------------------------------------------------------------------------
CLOSURE 				*vimscript-tricks-functions-closure*

Example : >

 fun! Fonctional(fn, value)
 	fun! Function(arg) closure
 		return a:fn(a:arg, a:value)
 	endfun
 	return funcref('Function')
 endfun

 let list = range(10)
 " add(list, element)
 echo Fonctional(function('add'), 3)(list)
 let F = Fonctional(function('add'), 5)
 echo F(list)
<

------------------------------------------------------------------------------
DICT FUNCTIONS 				*vimscript-tricks-functions-dict-funs*

Dict function : >

 fun! Fundict (arg) dict
 	echo self.name a:arg
 endfun
 " associate it with a dict
 let dict = {'name' : 'John'}
 let dict.fun = function('Fundict')
 " call it
 call dict.fun('Doe')
 " function ref
 let F = function('Fundict', dict)
 call F('Smith')
 " with empty arg
 let G = function('Fundict', [], dict)
 call G('Foo')
 " with predefined arg
 let H = function('Fundict', ['Bar'], dict)
 call H()
<

Anonymous function : >

 let dict = {'name' : 'John'}
 fun! dict.iam (arg) dict
 	echo self.name a:arg
 endfun
 call dict.iam('Will')
<

==============================================================================
TABS AND WINDOWS			*vimscript-tricks-tabs-and-windows*

Introduction			|vimscript-tricks-tabs-and-windows-introduction|
Tab number			|vimscript-tricks-tabs-and-windows-tab-number|
Tab buffer list			|vimscript-tricks-tabs-and-windows-tab-buflist|
Local window number		|vimscript-tricks-tabs-and-windows-local-win-number|
Global ID			|vimscript-tricks-tabs-and-windows-global-id|
Find a window			|vimscript-tricks-tabs-and-windows-find-window|

------------------------------------------------------------------------------
INTRODUCTION		*vimscript-tricks-tabs-and-windows-introduction*

Each window has a :

- local tab number
- global unique ID (until you restart vim, of course)

------------------------------------------------------------------------------
TAB NUMBER			*vimscript-tricks-tabs-and-windows-tab-number*

Examlpe : >

 let current_tab = tabpagenr()
 let last_tab = tabpagenr('$')
<

------------------------------------------------------------------------------
TAB BUFFER LIST		*vimscript-tricks-tabs-and-windows-tab-buflist*

With |tabpagebuflist()| : >

 let last = tabpagenr('$')
 for tab in range(1, last)
 	echo tab ':' tabpagebuflist(tab)
 endfor
<

------------------------------------------------------------------------------
LOCAL WINDOW NUMBER	*vimscript-tricks-tabs-and-windows-local-win-number*

Get id : >

 let win_nr = winnr()
 echo win_nr
<

Current local number in a given tab : >

 let tab_nr = 2
 let win_nr = tabpagewinnr(tab_nr)
 let last_win_nr = tabpagewinnr(tab_nr, '$')
 let num_win_on_tab = last_win_nr
<

Go to it : >

 let win_nr = 2
 execute win_nr 'wincmd w'
<

------------------------------------------------------------------------------
GLOBAL ID			*vimscript-tricks-tabs-and-windows-global-id*

Get id : >

 let win_local_nr = 2
 let tab_nr = 3
 let win_id = win_getid(win_local_nr, tab_nr)
 echo win_id
 let current_win_id = win_getid()
 echo current_win_id
<

Go to id : >

 let win_id = 1012
 call win_gotoid(win_id)
<

------------------------------------------------------------------------------
FIND A WINDOW		*vimscript-tricks-tabs-and-windows-find-window*

Find in which window(s) is displayed a buffer : >

 let win_list = win_findbuf(buf_nr)
<

==============================================================================
MAPPINGS					*vimscript-tricks-mappings*

Commands maps			|vimscript-tricks-mappings-commands-maps|
Expression			|vimscript-tricks-mappings-expression|
Plugs				|vimscript-tricks-mappings-plugs|

------------------------------------------------------------------------------
COMMAND MAPS			*vimscript-tricks-mappings-commands-maps*

Of course, you can use : >

 " command
 nnoremap <c-right> :tabnext<cr>
 " with <c-u> to avoid things like :'<,'>
 nnoremap <c-right> :<c-u>tabnext<cr>
 " call function
 nnoremap <c-right> :call goto_next_tab()<cr>
 " from insert mode
 inoremap <c-right> <esc>:tabnext<cr>i
<

but it’s often better to use |<cmd>| : >

 " command, no need to add <c-u>
 nnoremap <c-right> <cmd>tabnext<cr>
 " call function
 nnoremap <c-right> <cmd>call goto_next_tab()<cr>
 " from insert mode, no need to surround with <esc>...i
 inoremap <c-right> <cmd>tabnext<cr>
<

Advantages :

- execute the command without leaving the mode
- no need to add `<c-u>` after the colon
- also works from insert mode without addition
- faster
- silent

------------------------------------------------------------------------------
EXPRESSION			*vimscript-tricks-mappings-expression*

An expression map is an indirect one : it calls the function given on
the rhs to obtain the actual rhs of the map.

Example : if we define the function : >

 fun! TakeFive ()
 	return '5j'
 endfun
<

and the map : >

 nnoremap <expr> <F3> TakeFive()
<

hitting `<F3>` will move the cursor down five lines.


------------------------------------------------------------------------------
PLUGS					*vimscript-tricks-mappings-plugs*

Define a plug : >

 noremap <plug>(myplugin-function) <cmd>call plugin#file#function()<cr>
<

and let the user use it for his own map : >

 map <user-key> <plug>(myplugin-function)
<

This last map must be recursive to work.

==============================================================================
AUTOCOMMANDS				*vimscript-tricks-autocommands*

Custom				|vimscript-tricks-autocommands-custom|
Control execution		|vimscript-tricks-autocommands-control-execution|
No ordinary write		|vimscript-tricks-autocommands-bufwritecmd|
Yank ring			|vimscript-tricks-autocommands-yank-ring|

------------------------------------------------------------------------------
CUSTOM					*vimscript-tricks-autocommands-custom*

You can trigger a custom event, somewhere in your plugin : >

 doautocmd User MyPluginEvent
<

and let the user add whatever command he wants to it : >

 autocmd User MyPluginEvent echo 'hello there !'
<

------------------------------------------------------------------------------
CONTROL EXECUTION	*vimscript-tricks-autocommands-control-execution*

To avoid auto-execution, use |noautocmd|.

This one change window without triggering autocommand : >

 noautocmd call win_gotoid(window_id)
<

If needed, you can trigger them later by using |doautocmd| : >

 doautocmd WinEnter
 doautocmd BufEnter
	...
<

------------------------------------------------------------------------------
NO ORDINARY WRITE		*vimscript-tricks-autocommands-bufwritecmd*

Some buffers are special, and not related to a file, like the quickfix
window. In that case, writing it does not mean a simple copy to the
file system, but can involve a completely distinct operation. The
|BufWriteCmd| event is there to modify the meaning of the |:write|
command.  These autocommands are often buffer local. Example : >

 autocmd BufWriteCmd <buffer> call FancyStuff ()
<

Writing the buffer where this autocommand is defined will call
|FancyStuff()| instead of saving to disc.


------------------------------------------------------------------------------
YANK RING		*vimscript-tricks-autocommands-yank-ring*

First define a global var to hold the ring : >

let g:yankring = []
<

then define a function to add yanks : >

fun! Add2yankring ()
	let content = getreg('"')
	call insert(g:yankring, content)
endfun
<

With this autocommand, your function will be triggered at each yank : >

 autocmd TextYankPost * call Add2yankring()
<

==============================================================================
COMMON TYPOS					*vimscript-tricks-common-typos*

Let it be			|vimscript-tricks-common-typos-let-it-be|

------------------------------------------------------------------------------
LET IT BE			*vimscript-tricks-common-typos-let-it-be*

Can you see this one ?

```vim
let bufnum = bufnr('%')
let filename = bufname(bufnum)
let filename = fnamemodify(filename, ':t')
lef filename = fnamemodify(filename, ':p')
echo filename
```

The |filename| var is not what you could expect. In a big file, you can
easily miss it, and you could lose time to find it, because vim will
throw no error. In the fourth line, it's a |lef| where it should be a
|let|. The former is a shortcut for |:left|.

So, when things are not working as they should, always search for
`\<lef\>` : either it is a typo for |let|, or it is intended and you
want to type the full |left| instead.

==============================================================================
ERRORS						*vimscript-tricks-errors*

With |:return|, you can end the current function, but outer scope
contines. One solution is to test every scope : >

 function Helper()
     return 'bad value that will mess up everything'
 endfunction

 function A()
     let h = Helper ()
     if h ==# 'bad value that will mess up everything'
     	return 'we stop here'
     endif
 endfunction

 function B()
     let a = A ()
     if a ==# 'we stop here'
 	return 'unable to go on'
     endif
 endfunction
<

but this can be tedious and become very verbose. If you want to stop
all the scopes at once, use |:throw| : >

 function Helper()
     return 'bad value that will mess up everything'
 endfunction

 function A()
     let h = Helper ()
     if h ==# 'bad value that will mess up everything'
         throw 'we stop here'
     endif
 endfunction

 function B()
     let a = A ()
 endfunction
<

==============================================================================
PROFILE						*vimscript-tricks-profile*

The |:profile| command can help you to locate where your functions spend a lot
of time. Example : >

 " ---- in vim
 profile start ~/vim-profile.log
 profile func *
 profile file *
 " ... doing stuff to profile ...
 profile stop
 " ---- in a terminal
 less ~/vim-profile.log
<

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:
